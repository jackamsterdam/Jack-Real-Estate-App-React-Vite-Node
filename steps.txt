Steps to remember: 

git clone https://github.com/jackamsterdam/Jack-real-estate-app.git . 
npm i
edit package.json
npm run dev  - we have vite installed (npm init vite cool-app and choose react and gives you vite.config.js file)
pronounced "VEET" - Vite - 1. serves code locally during development 2. bundles js and css and other assets for production (like webpack, parcel but better)
npm i sass, in src make file index.scss and add import "./index.scss" to main.jsx 
traditional create react app uses webpack under the hood btw and in develpment it rebundles code each time so we have to wait before seeing changes in browser
but Vite esbuild works with es modules so its faster - bundles on the fly. 
HMR - hot module replacement.
Vite uses ROLLUP to bundle for production npm run build npm run preview. 

Responsive - breakpoints
we will have three screen sizes s m l 
and for each we will change width of layout, but maximun size of screen will be 3/4 of a screen centered. 
so max width 1366 px not full width. 


scss:
@mixin sm put an @content directive (great for dynamic content) so you can write dynamic scss inside the actual class .layout you used the @include in. 
benefits - Reusable mixins with different dynamic content

The @content directive in SCSS makes code more modular and flexible by allowing dynamic content insertion within mixins. Here's how it enhances modularity:

Reusable Mixins: With @content, you can create mixins that encapsulate common styles but allow customization of specific properties each time they're used. This promotes code reuse and keeps your styles DRY (Don't Repeat Yourself).
Flexibility: By allowing dynamic content insertion, mixins become more flexible. You can customize the behavior of mixins by passing different content each time they're included using @include.
Separation of Concerns: Mixins with @content help maintain a clear separation of concerns. Mixins focus on defining reusable styles, while the content provided via @content focuses on specific variations or additions to those styles.
Modularity: With @content, mixins become more modular. They can be used in various contexts with different content, enabling a more modular architecture in your stylesheet.
Easier Maintenance: By abstracting common styles into mixins and using @content to inject dynamic content, your code becomes easier to maintain. Changes to common styles can be made in one place (the mixin definition), and those changes will be reflected wherever the mixin is used.

a - anchor tags display none for sm screen but when you need them do display: initial. 